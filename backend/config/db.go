package config

import (
	"fmt"
	"time"

	"golang.org/x/crypto/bcrypt"

	"github.com/SA/entity"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

var db *gorm.DB

func DB() *gorm.DB {
	return db
}

func ConnectionDB() {
	database, err := gorm.Open(sqlite.Open("sa.db?cache=shared"), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}
	fmt.Println("connected database")
	db = database
}

func SetupDatabase() {
	// === AutoMigrate ===
	if err := db.AutoMigrate(
		&entity.Admin{},
		&entity.RoomType{},
		&entity.AssetType{},
		&entity.Room{},
		&entity.Student{},
		&entity.Evidence{},
		&entity.Contract{},
		&entity.Billing{},
		&entity.BillItem{},
		&entity.Payment{},

		// üëá ‡∏û‡∏ß‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö/‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
		&entity.AnnouncementTarget{},
		&entity.AnnouncementType{},
		&entity.Announcement{},
		&entity.ReviewTopic{},
		&entity.Review{},
		&entity.MaintenanceStatus{},
		&entity.ProblemType{},
		&entity.Maintenance{},

		&entity.RoomAsset{},

		// üëá ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÅ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏π‡∏Å
		&entity.MeterType{},
		&entity.RatePerUnit{},
		&entity.MeterRecord{},
	); err != nil {
		panic(err)
	}

	// ‡πÉ‡∏ä‡πâ Transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡∏ä‡∏∏‡∏î
	tx := db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
			panic(r)
		}
	}()

	// === Seed base password ===
	password, _ := bcrypt.GenerateFromPassword([]byte("123456"), 14)

	// ===== Admin (‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢ Email) =====
	adminSeed := entity.Admin{
		First_Name: "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
		Last_Name:  "‡πÄ‡∏≠‡∏á‡∏ô‡∏∞",
		Username:   "admin",
		Password:   string(password),
		Email:      "admin@gmail.com", // ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô unique key
		Birthday:   time.Date(2004, 12, 16, 0, 0, 0, 0, time.UTC),
		Phone:      "08130512752",
	}
	{
		var a entity.Admin
		if err := tx.
			Where(&entity.Admin{Email: adminSeed.Email}).
			Attrs(adminSeed).
			FirstOrCreate(&a).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ===== Student (‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢ Email) =====
	r1, r2, r3 := uint(1), uint(2), uint(3)
	students := []entity.Student{
		{
			Username:     "SA",
			Password:     string(password),
			Email:        "sa@gmail.com",
			First_Name:   "‡∏ì‡∏±‡∏ê‡∏ß‡∏∏‡∏í‡∏¥",
			Last_Name:    "‡∏û‡∏£‡∏°‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
			Birthday:     time.Date(2002, 12, 3, 0, 0, 0, 0, time.UTC),
			Phone:        "0811112233",
			Parent_Phone: "0899998877",
			Parent_Name:  "‡∏õ‡∏£‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏ê ‡∏û‡∏£‡∏°‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
			Major:        "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå",
			Address:      "45/6 ‡∏ï.‡∏´‡∏ô‡∏≠‡∏á‡∏à‡∏∞‡∏ö‡∏Å ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤ 30000",
			Room_ID:      &r1,
		},
		{
			Username:     "SA1",
			Password:     string(password),
			Email:        "sa1@gmail.com",
			First_Name:   "‡∏ß‡∏¥‡∏ä‡∏ç‡πå",
			Last_Name:    "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πÇ‡∏ä‡∏ï‡∏¥",
			Birthday:     time.Date(2003, 4, 21, 0, 0, 0, 0, time.UTC),
			Phone:        "0823456789",
			Parent_Phone: "0812349876",
			Parent_Name:  "‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πÇ‡∏ä‡∏ï‡∏¥",
			Major:        "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®",
			Address:      "88/9 ‡∏ñ.‡∏™‡∏∏‡∏£‡∏ô‡∏≤‡∏£‡∏≤‡∏¢‡∏ì‡πå ‡∏ï.‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
			Room_ID:      &r2,
		},
		{
			Username:     "SA2",
			Password:     string(password),
			Email:        "sa2@gmail.com",
			First_Name:   "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏ô‡∏Å",
			Last_Name:    "‡∏ö‡∏∏‡∏ç‡∏°‡∏≤‡∏Å",
			Birthday:     time.Date(2004, 1, 17, 0, 0, 0, 0, time.UTC),
			Phone:        "0865432198",
			Parent_Phone: "0856789123",
			Parent_Name:  "‡∏≠‡∏≥‡πÑ‡∏û ‡∏ö‡∏∏‡∏ç‡∏°‡∏≤‡∏Å",
			Major:        "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
			Address:      "129 ‡∏´‡∏°‡∏π‡πà 7 ‡∏ï.‡πÇ‡∏Ñ‡∏Å‡∏Å‡∏£‡∏ß‡∏î ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
			Room_ID:      &r3,
		},
		{
			Username:     "SA3",
			Password:     string(password),
			Email:        "sa3@gmail.com",
			First_Name:   "‡∏®‡∏£‡∏±‡∏ì‡∏¢‡πå",
			Last_Name:    "‡∏≠‡∏∏‡∏î‡∏°‡∏™‡∏∏‡∏Ç",
			Birthday:     time.Date(2002, 9, 9, 0, 0, 0, 0, time.UTC),
			Phone:        "0832224455",
			Parent_Phone: "0891234560",
			Parent_Name:  "‡∏°‡∏¢‡∏∏‡∏£‡∏µ ‡∏≠‡∏∏‡∏î‡∏°‡∏™‡∏∏‡∏Ç",
			Major:        "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå",
			Address:      "12/3 ‡∏ï.‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏®‡∏≤‡∏•‡∏≤ ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
		},
		{
			Username:     "SA4",
			Password:     string(password),
			Email:        "sa4@gmail.com",
			First_Name:   "‡∏Å‡∏§‡∏©‡∏ì‡∏∞",
			Last_Name:    "‡∏™‡∏µ‡∏ó‡∏≠‡∏á",
			Birthday:     time.Date(2003, 6, 28, 0, 0, 0, 0, time.UTC),
			Phone:        "0845556677",
			Parent_Phone: "0823331122",
			Parent_Name:  "‡∏ö‡∏∏‡∏ç‡∏™‡πà‡∏á ‡∏™‡∏µ‡∏ó‡∏≠‡∏á",
			Major:        "‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
			Address:      "56/78 ‡∏ñ.‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û ‡∏ï.‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏≤‡∏∞ ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
		},
	}
	for i := range students {
		s := students[i]
		var got entity.Student
		if err := tx.
			Where(&entity.Student{Email: s.Email}).
			Attrs(s).
			FirstOrCreate(&got).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ===== Contract (‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: StudentID + Start_Date + End_Date) =====
	startDate, _ := time.Parse("2006-01-02", "2025-01-01")
	endDate, _ := time.Parse("2006-01-02", "2026-04-01")
	s1, s2, s3 := uint(1), uint(2), uint(3)

	contracts := []entity.Contract{
		{Start_Date: startDate, End_Date: endDate, Rate: 2900.00, StudentID: &s1, RoomID: &s1, Admin_ID: &s1},
		{Start_Date: startDate, End_Date: endDate, Rate: 2900.00, StudentID: &s2, RoomID: &s2, Admin_ID: &s1},
		{Start_Date: startDate, End_Date: endDate, Rate: 2900.00, StudentID: &s3, RoomID: &s2, Admin_ID: &s1},
	}
	for i := range contracts {
		ct := contracts[i]
		var got entity.Contract
		if err := tx.
			Where(&entity.Contract{
				Start_Date: ct.Start_Date,
				End_Date:   ct.End_Date,
				StudentID:  ct.StudentID,
			}).
			Attrs(ct).
			FirstOrCreate(&got).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ===== Payment (‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: StudentID + BillingID + ContractID) =====
	recv := uint(1)
	payments := []entity.Payment{
		{StudentID: 1, BillingID: 1, ContractID: 1, EvidenceID: 1, ReceiverID: &recv, Amount: 2900, Payment_Date: time.Now(), Method: "-", PayerName: "‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á A"},
		{StudentID: 2, BillingID: 2, ContractID: 2, EvidenceID: 2, ReceiverID: &recv, Amount: 2900, Payment_Date: time.Now(), Method: "-", PayerName: "‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á A"},
		{StudentID: 3, BillingID: 3, ContractID: 3, EvidenceID: 3, ReceiverID: &recv, Amount: 2900, Payment_Date: time.Now(), Method: "-", PayerName: "‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á A"},
	}
	for i := range payments {
		p := payments[i]
		var got entity.Payment
		if err := tx.
			Where(&entity.Payment{StudentID: p.StudentID, BillingID: p.BillingID, ContractID: p.ContractID}).
			Attrs(p).
			FirstOrCreate(&got).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ===== RoomType (idempotent) =====
	rtSeeds := []struct {
		Name  string
		Price float64
	}{
		{"Air Room", 2900.00},
		{"Fan Room", 2500.00},
	}
	for _, s := range rtSeeds {
		var rt entity.RoomType
		if err := tx.Where(&entity.RoomType{RoomTypeName: s.Name}).
			Attrs(entity.RoomType{RentalPrice: s.Price}).
			FirstOrCreate(&rt).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ‡∏î‡∏∂‡∏á RoomType IDs
	var rtAir, rtFan entity.RoomType
	if err := tx.First(&rtAir, "room_type_name = ?", "Air Room").Error; err != nil {
		tx.Rollback()
		panic(err)
	}
	if err := tx.First(&rtFan, "room_type_name = ?", "Fan Room").Error; err != nil {
		tx.Rollback()
		panic(err)
	}

	// ===== Room (‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏î‡∏≤ ID ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡∏Å‡∏î‡πâ‡∏ß‡∏¢ RoomNumber ‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡πá‡∏ï RoomTypeID ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á) =====
	roomSeeds := []struct {
		Number string
		Status string
		Image  string
		RTID   uint
		StudID *uint // ‡πÉ‡∏™‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Students ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡πÑ‡∏î‡πâ (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤)
	}{
		{"100", "‡∏ß‡πà‡∏≤‡∏á", "room1.jpg", rtAir.ID, nil},
		{"101", "‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á", "room2.jpg", rtAir.ID, nil},
		{"102", "‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á", "room3.jpg", rtAir.ID, nil},
		{"103", "‡∏ß‡πà‡∏≤‡∏á", "room4.jpg", rtFan.ID, nil},
		{"104", "‡∏ß‡πà‡∏≤‡∏á", "room5.jpg", rtFan.ID, nil},
		{"105", "‡∏ß‡πà‡∏≤‡∏á", "room6.jpg", rtFan.ID, nil},
		{"201", "‡∏ß‡πà‡∏≤‡∏á", "room7.jpg", rtAir.ID, nil},
		{"202", "‡∏ß‡πà‡∏≤‡∏á", "room8.jpg", rtAir.ID, nil},
		{"203", "‡∏ß‡πà‡∏≤‡∏á", "room9.jpg", rtFan.ID, nil},
		{"204", "‡∏ß‡πà‡∏≤‡∏á", "room10.jpg", rtFan.ID, nil},
		{"205", "‡∏ß‡πà‡∏≤‡∏á", "room11.jpg", rtAir.ID, nil},
	}
	for _, r := range roomSeeds {
		var rm entity.Room
		if err := tx.Where(&entity.Room{RoomNumber: r.Number}).
			Attrs(entity.Room{
				Status:     r.Status,
				Image:      r.Image,
				RoomTypeID: r.RTID,
				AdminID:    1, // ‡πÉ‡∏ä‡πâ admin seed ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
			}).
			FirstOrCreate(&rm).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á map: roomNumber -> roomID (‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠)
	var roomList []entity.Room
	if err := tx.Find(&roomList).Error; err != nil {
		tx.Rollback()
		panic(err)
	}
	roomIDByNumber := map[string]uint{}
	for _, r := range roomList {
		roomIDByNumber[r.RoomNumber] = r.ID
	}

	// ===== AssetType =====
	atSeeds := []struct {
		Name       string
		Type       string
		PenaltyFee float64
	}{
		{"‡πÄ‡∏ï‡∏µ‡∏¢‡∏á", "‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå", 500.00},
		{"Wi-Fi", "‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å", 1000.00},
	}
	now := time.Now()
	for _, s := range atSeeds {
		var at entity.AssetType
		if err := tx.Where(&entity.AssetType{Name: s.Name}).
			Attrs(entity.AssetType{Type: s.Type, PenaltyFee: s.PenaltyFee, Date: now}).
			FirstOrCreate(&at).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ‡∏î‡∏∂‡∏á AssetType ‡πÄ‡∏õ‡πá‡∏ô map ‡∏ä‡∏∑‡πà‡∏≠ -> ID
	var atList []entity.AssetType
	if err := tx.Find(&atList).Error; err != nil {
		tx.Rollback()
		panic(err)
	}
	atID := map[string]uint{}
	for _, a := range atList {
		atID[a.Name] = a.ID
	}

	// ===== RoomAsset (‡πÉ‡∏ä‡πâ FirstOrCreate ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡∏≠‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ RoomNumber + AssetTypeID) =====
	raSeeds := []struct {
		RoomNumber string
		AssetName  string
		Qty        int
	}{
		{"101", "‡πÄ‡∏ï‡∏µ‡∏¢‡∏á", 1},
		{"102", "‡πÄ‡∏ï‡∏µ‡∏¢‡∏á", 1},
		{"103", "Wi-Fi", 1},
	}
	for _, s := range raSeeds {
		var ra entity.RoomAsset
		if err := tx.Where(&entity.RoomAsset{
			RoomNumber:  s.RoomNumber,
			AssetTypeID: atID[s.AssetName],
		}).Attrs(entity.RoomAsset{
			Quantity:  s.Qty,
			CheckDate: &now,
		}).FirstOrCreate(&ra).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ===== ComboBox Seeds =====
	// ProblemType
	for _, name := range []string{"‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", "‡∏õ‡∏£‡∏∞‡∏õ‡∏≤", "‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"} {
		var pt entity.ProblemType
		if err := tx.
			Where(&entity.ProblemType{TypeName: name}).
			Attrs(entity.ProblemType{TypeName: name}).
			FirstOrCreate(&pt).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// MaintenanceStatus
	for _, name := range []string{"‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"} {
		var st entity.MaintenanceStatus
		if err := tx.
			Where(&entity.MaintenanceStatus{StatusName: name}).
			Attrs(entity.MaintenanceStatus{StatusName: name}).
			FirstOrCreate(&st).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ReviewTopic
	for _, name := range []string{"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏ö‡∏Å‡∏ß‡∏ô", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"} {
		var t entity.ReviewTopic
		if err := tx.
			Where(&entity.ReviewTopic{TopicName: name}).
			Attrs(entity.ReviewTopic{TopicName: name}).
			FirstOrCreate(&t).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// AnnouncementTarget
	for _, name := range []string{
		"‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô",
		"‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
		"‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°",
		"‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤",
	} {
		var t entity.AnnouncementTarget
		if err := tx.
			Where(&entity.AnnouncementTarget{Name: name}).
			Attrs(entity.AnnouncementTarget{Name: name}).
			FirstOrCreate(&t).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// AnnouncementType
	for _, name := range []string{"‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö", "‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡πà‡∏°‡∏´‡∏≠‡∏û‡∏±‡∏Å", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"} {
		var t entity.AnnouncementType
		if err := tx.
			Where(&entity.AnnouncementType{Name: name}).
			Attrs(entity.AnnouncementType{Name: name}).
			FirstOrCreate(&t).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ===== Announcements (‡∏´‡∏•‡∏±‡∏á Target/Type ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß) =====
	// ‡∏î‡∏∂‡∏á Admin ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
	var admin entity.Admin
	if err := tx.First(&admin, "email = ?", "admin@gmail.com").Error; err != nil {
		tx.Rollback()
		panic("admin seed missing: " + err.Error())
	}

	// ‡∏î‡∏∂‡∏á Target
	var targetAll, targetUnpaid, targetRepair, targetRenew entity.AnnouncementTarget
	tx.First(&targetAll, "name = ?", "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô")
	tx.First(&targetUnpaid, "name = ?", "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
	tx.First(&targetRepair, "name = ?", "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°")
	tx.First(&targetRenew, "name = ?", "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤")

	// ‡∏î‡∏∂‡∏á Type
	var typeSystem, typeMaintenance, typeFee entity.AnnouncementType
	tx.First(&typeSystem, "name = ?", "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö")
	tx.First(&typeMaintenance, "name = ?", "‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡πà‡∏°‡∏´‡∏≠‡∏û‡∏±‡∏Å")
	tx.First(&typeFee, "name = ?", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢")

	seedAnnouncement := func(title, content, picture string, targetID, typeID uint) {
		var a entity.Announcement
		_ = tx.
			Where(&entity.Announcement{Title: title}).
			Attrs(entity.Announcement{
				Content:              content,
				Picture:              picture,
				AdminID:              admin.ID,
				AnnouncementTargetID: targetID,
				AnnouncementTypeID:   typeID,
			}).
			FirstOrCreate(&a)
	}

	// ====== 0) Helpers ======
	periodStart := time.Date(time.Now().Year(), time.Now().Month(), 1, 0, 0, 0, 0, time.Local)

	// ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ RoomNumber (‡πÑ‡∏°‡πà‡πÄ‡∏î‡∏≤ 1/2)
	var room101, room102 entity.Room
	if err := tx.Where(&entity.Room{RoomNumber: "101"}).First(&room101).Error; err != nil {
		tx.Rollback()
		panic(err)
	}
	if err := tx.Where(&entity.Room{RoomNumber: "102"}).First(&room102).Error; err != nil {
		tx.Rollback()
		panic(err)
	}

	// ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Email (‡πÑ‡∏°‡πà‡πÄ‡∏î‡∏≤ 1/2)
	var stu1, stu2 entity.Student
	if err := tx.Where(&entity.Student{Email: "sa@gmail.com"}).First(&stu1).Error; err != nil {
		tx.Rollback()
		panic(err)
	}
	if err := tx.Where(&entity.Student{Email: "sa1@gmail.com"}).First(&stu2).Error; err != nil {
		tx.Rollback()
		panic(err)
	}

	// ====== 1) MeterTypes ======
	var mtElec, mtWater entity.MeterType
	if err := tx.Where(&entity.MeterType{MeterName: "‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü"}).
		Attrs(entity.MeterType{MeterName: "‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü"}).
		FirstOrCreate(&mtElec).Error; err != nil {
		tx.Rollback()
		panic(err)
	}

	if err := tx.Where(&entity.MeterType{MeterName: "‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥"}).
		Attrs(entity.MeterType{MeterName: "‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥"}).
		FirstOrCreate(&mtWater).Error; err != nil {
		tx.Rollback()
		panic(err)
	}

	// ===== Rates =====
	var rateElec, rateWater entity.RatePerUnit

	if err := tx.Where(&entity.RatePerUnit{MeterTypeID: mtElec.ID}).
		Attrs(entity.RatePerUnit{PricePerUnit: 5}).
		FirstOrCreate(&rateElec).Error; err != nil {
		tx.Rollback()
		panic(err)
	}

	if err := tx.Where(&entity.RatePerUnit{MeterTypeID: mtWater.ID}).
		Attrs(entity.RatePerUnit{PricePerUnit: 3}).
		FirstOrCreate(&rateWater).Error; err != nil {
		tx.Rollback()
		panic(err)
	}
	// ====== 3) MeterRecords (‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ = room + meterType + periodStart) ======
	type mrSeed struct {
		RoomID        uint
		MeterTypeID   uint
		StudentID     uint
		Old, New      float64
		RatePerUnitID uint
	}

	seeds := []mrSeed{
		{room101.ID, mtElec.ID, stu1.ID, 100, 150, rateElec.ID},
		{room101.ID, mtWater.ID, stu1.ID, 120, 150, rateWater.ID},
		{room102.ID, mtElec.ID, stu2.ID, 100, 150, rateElec.ID},
		{room102.ID, mtWater.ID, stu2.ID, 120, 150, rateWater.ID},
	}

	for _, s := range seeds {
		unit := s.New - s.Old
		amount := unit
		if s.RatePerUnitID == rateElec.ID {
			amount = unit * rateElec.PricePerUnit
		}
		if s.RatePerUnitID == rateWater.ID {
			amount = unit * rateWater.PricePerUnit
		}

		var rec entity.MeterRecord
		if err := tx.Where(&entity.MeterRecord{
			RoomID:      &s.RoomID,
			MeterTypeID: &s.MeterTypeID,
			PeriodStart: periodStart,
		}).Attrs(entity.MeterRecord{
			RecordDate:    time.Now(),
			OldValue:      s.Old,
			NewValue:      s.New,
			UnitUsed:      unit,
			TotalAmount:   amount,
			RatePerUnitID: &s.RatePerUnitID, // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
			StudentID:     &s.StudentID,
		}).FirstOrCreate(&rec).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ====== 4) Billing (‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ = room + periodStart) ======
	statusPaid := "‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
	statusUnpaid := "‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏´‡∏ô‡∏µ ‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢"

	var bill1, bill2 entity.Billing
	if err := tx.Where(&entity.Billing{RoomID: room101.ID, PeriodStart: periodStart}).
		Attrs(entity.Billing{
			BillingDate: time.Now(),
			AmountDue:   4700,
			DueDate:     periodStart.AddDate(0, 0, 30),
			Status:      &statusUnpaid,
		}).FirstOrCreate(&bill1).Error; err != nil {
		tx.Rollback()
		panic(err)
	}

	if err := tx.Where(&entity.Billing{RoomID: room102.ID, PeriodStart: periodStart}).
		Attrs(entity.Billing{
			BillingDate: time.Now(),
			AmountDue:   5200,
			DueDate:     periodStart.AddDate(0, 0, 30),
			Status:      &statusPaid,
		}).FirstOrCreate(&bill2).Error; err != nil {
		tx.Rollback()
		panic(err)
	}

	// ====== 5) BillItems (‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ = billing + item_type) ======
	items1 := []entity.BillItem{
		{BillingID: bill1.ID, ItemType: "‡∏Ñ‡πà‡∏≤‡∏´‡∏≠", Amount: 4000},
		{BillingID: bill1.ID, ItemType: "‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü", Amount: 250},
		{BillingID: bill1.ID, ItemType: "‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥", Amount: 90},
	}
	items2 := []entity.BillItem{
		{BillingID: bill2.ID, ItemType: "‡∏Ñ‡πà‡∏≤‡∏´‡∏≠", Amount: 4500},
		{BillingID: bill2.ID, ItemType: "‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü", Amount: 300},
		{BillingID: bill2.ID, ItemType: "‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥", Amount: 100},
	}
	for _, it := range items1 {
		bi := it // ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤ ‡∏Å‡∏±‡∏ô pointer reuse
		if err := tx.Where(&entity.BillItem{BillingID: bill1.ID, ItemType: bi.ItemType}).
			Attrs(entity.BillItem{Amount: bi.Amount}).
			FirstOrCreate(&bi).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}
	for _, it := range items2 {
		bi := it
		if err := tx.Where(&entity.BillItem{BillingID: bill2.ID, ItemType: bi.ItemType}).
			Attrs(entity.BillItem{Amount: bi.Amount}).
			FirstOrCreate(&bi).Error; err != nil {
			tx.Rollback()
			panic(err)
		}
	}

	// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
	seedAnnouncement(
		"‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö 3 ‡∏Å.‡∏¢.",
		"‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 22:00 - 02:00 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤",
		"https://picsum.photos/seed/system/800/400",
		targetAll.ID, typeSystem.ID,
	)
	seedAnnouncement(
		"‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ó‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô 2",
		"‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 09:00-12:00 ‡∏ä‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏ã‡πà‡∏≠‡∏°‡∏ó‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô 2 ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡πÑ‡∏´‡∏•‡∏ä‡πâ‡∏≤ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å",
		"https://picsum.photos/seed/maintenance/800/400",
		targetRepair.ID, typeMaintenance.ID,
	)
	seedAnnouncement(
		"‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 5",
		"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤ 2,900 ‡∏ö‡∏≤‡∏ó ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 5 ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö",
		"https://picsum.photos/seed/fee/800/400",
		targetUnpaid.ID, typeFee.ID,
	)
	seedAnnouncement(
		"‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ",
		"‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 30 ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏≠‡∏û‡∏±‡∏Å",
		"https://picsum.photos/seed/renew/800/400",
		targetRenew.ID, typeFee.ID,
	)

	// === Commit ===
	if err := tx.Commit().Error; err != nil {
		panic(err)
	}
}
