import { Button, Col, Form, Input, InputNumber, Row, Select, message } from "antd";
import { useNavigate } from "react-router-dom";
import { PostAllRooms, GetAllRoomTypes } from "../../Service/https/index";
import type { Room } from "../../interfaces/Room";
import { useEffect, useState } from "react";

const { Option } = Select;

function CreateRoomForm() {
  const navigate = useNavigate();
  const [form] = Form.useForm();
  const [messageApi, contextHolder] = message.useMessage();

  const [roomTypes, setRoomTypes] = useState<any[]>([]);

  useEffect(() => {
    const fetchRoomTypes = async () => {
      try {
        const res = await GetAllRoomTypes();
        if (res.status === 200) {
          // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö array ‡∏ï‡∏£‡∏á ‡πÜ
          console.log("üì¶ Room types from API:", res.data);
          setRoomTypes(Array.isArray(res.data) ? res.data : []);
        } else {
          messageApi.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        }
      } catch (error) {
        messageApi.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á");
        console.error(error);
      }
    };
    fetchRoomTypes();
  }, [messageApi]);

  const onFinish = async (values: any) => {
    try {
      const payload: Room = {
        room_number: values.room_number,
        RoomTypeID: values.room_type,
        room_status: values.status,
        AdminID: Number(localStorage.getItem("id")),
        Image: "",
        BookingTime: new Date().toISOString(),
        StudentID: null,
      };

      const res = await PostAllRooms(payload);
      if (res.status === 201) {
        messageApi.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        navigate("/room");
      } else {
        messageApi.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + res.data?.error);
      }
    } catch (error) {
      messageApi.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÑ‡∏î‡πâ");
      console.error(error);
    }
  };

  return (
    <>
      {contextHolder}
      <Row justify="center">
        <Col span={16}>
          <h2>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà</h2>
          <Form form={form} layout="vertical" onFinish={onFinish} autoComplete="off">
            <Form.Item label="‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á" name="room_number" rules={[{ required: true }]}>
              <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô 101" />
            </Form.Item>

            <Form.Item label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á" name="room_type" rules={[{ required: true }]}>
              <Select
                placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"
                onChange={(val) => {
                  const selectedType = roomTypes.find((rt) => rt.ID === val);
                  form.setFieldsValue({ price: selectedType?.RentalPrice || 0 });
                }}
                allowClear
              >
                {roomTypes.map((rt) => (
                  <Option key={rt.ID} value={rt.ID}>
                    {rt.RoomTypeName}
                  </Option>
                ))}
              </Select>
            </Form.Item>

            <Form.Item label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" name="status" rules={[{ required: true }]}>
              <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞">
                <Option value="‡∏ß‡πà‡∏≤‡∏á">‡∏ß‡πà‡∏≤‡∏á</Option>
                <Option value="‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á">‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á</Option>
              </Select>
            </Form.Item>

            <Form.Item label="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)" name="price">
              <InputNumber min={0} style={{ width: "100%" }} disabled />
            </Form.Item>

            <Form.Item>
              <Row justify="space-between">
                <Col>
                  <Button onClick={() => navigate("/room")}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Button>
                </Col>
                <Col>
                  <Button type="primary" htmlType="submit">
                    ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  </Button>
                </Col>
              </Row>
            </Form.Item>
          </Form>
        </Col>
      </Row>
    </>
  );
}

export default CreateRoomForm;
