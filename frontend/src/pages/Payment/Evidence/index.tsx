// pages/.../Evidence.tsx
import {
  Upload, Button, Form, Input, DatePicker, Row, Col, Modal, Segmented, Space, message,
} from "antd";
import { InboxOutlined, UserOutlined } from "@ant-design/icons";
import type { UploadProps } from "antd";
import dayjs from "dayjs";
import React, { useEffect, useState } from "react";
import { UploadEvidence ,GetEvidenceByID ,UpdateEvidence} from "../../../Service/https";
import { useNavigate, useLocation, useParams } from "react-router-dom";
import type { EvidenceInterface } from "../../../interfaces/Evidence";

const { Dragger } = Upload;

type Method = "bank" | "qr" ;

export default function Evidence() {
  const [form] = Form.useForm();
  const [fileList, setFileList] = useState<any[]>([]);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [uploadedUrl, setUploadedUrl] = useState<string | null>(null);

  const [method, setMethod] = useState<Method>("bank");
  const [payerName, setPayerName] = useState("");
  const [amount, setAmount] = useState("");
  const [submitting, setSubmitting] = useState(false);
  
  const { id } = useParams<{ id: string }>();        // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏Ø ‡∏à‡∏≤‡∏Å URL
  const navigate = useNavigate();
  const location = useLocation();   

  const [loading, setLoading] = useState(false);
  // const sid = localStorage.getItem("id");
  // localStorage.setItem("current_payment_id","123")
  
  const getPaymentId = () => {
    const qs = new URLSearchParams(location.search);
    const qid = qs.get("paymentId");
    const sid = localStorage.getItem("id");
    const n = Number(qid || sid || "");
    return Number.isNaN(n) ? undefined : n;
  };

  const clearPreview = () => {
    if (previewUrl) URL.revokeObjectURL(previewUrl);
    setPreviewUrl(null);
  };

  useEffect(() => {
    // ‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏™ refresh ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏à‡∏≥ paymentId ‡πÑ‡∏î‡πâ
    const qs = new URLSearchParams(location.search);
    const qid = qs.get("paymentId");
    if (qid) localStorage.setItem("current_payment_id", qid);
    return () => clearPreview();
  }, [location.search]);

  const uploadProps: UploadProps = {
    name: "file",
    multiple: false,
    beforeUpload: (file) => {
      const okType = ["image/jpeg", "image/png", "application/pdf"].includes(file.type);
      if (!okType) {
        Modal.error({ title: "‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", content: "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JPG, PNG, PDF ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" });
        return Upload.LIST_IGNORE;
      }
      if (file.size / 1024 / 1024 > 5) {
        Modal.error({ title: "‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ", content: "‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB" });
        return Upload.LIST_IGNORE;
      }
      setFileList([file]);
      clearPreview();
      setPreviewUrl(URL.createObjectURL(file));
      setUploadedUrl(null);
      return false; // ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
    },
    onRemove: () => { setFileList([]); clearPreview(); },
    fileList,
  };

  const handleSubmit = async (values: any) => {
    if (submitting) return;

    if (fileList.length === 0) {
      Modal.error({ title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå", content: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á" });
      return;
    }

    const paymentId = getPaymentId();
    if (!paymentId) {
      Modal.error({ title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞", content: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á paymentId ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢" });
      return;
    }

    const amt = Number(amount);
    if (!amt || amt <= 0) {
      Modal.error({ title: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", content: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0" });
      return;
    }

    try {
      setSubmitting(true);

      const toBase64 = (file: File) =>
        new Promise<string>((resolve, reject) => {
          const r = new FileReader();
          r.readAsDataURL(file);
          r.onload = () => resolve(r.result as string);
          r.onerror = reject;
        });

      const base64File = await toBase64(fileList[0]);
      const student_id = Number(localStorage.getItem("id")) || 0;

      const payload = {
        file: base64File,
        date: values.transferDate.format("YYYY-MM-DD HH:mm:ss"),
        note: values.note || "",
        payment_id: paymentId,
        student_id,
        method,
        payer_name: payerName,
        amount: amt,
      };

      const res = await UploadEvidence(payload);
      console.log("Upload /upload ->", res?.status, res?.data);

      if (res?.status === 200) {
        const fileURL = res?.data?.file_url as string | undefined;
        Modal.success({
          title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          content: <>‚úÖ ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß{fileURL && <> ‚Äî <a href={fileURL} target="_blank">‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå</a></>}</>,
        });
        if (fileURL) setUploadedUrl(fileURL);

        form.resetFields();
        setFileList([]); clearPreview();
        navigate("/Payment/Evidence/EvidenceSuccess", { replace: true });
      } else if (res?.status === 401) {
        Modal.error({ title: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï", content: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á" });
      } else {
        Modal.error({
          title: "‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          content: `‚ùå ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (code ${res?.status ?? "-"})`,
        });
      }
    } catch (e: any) {
      console.error("handleSubmit error:", e);
      Modal.error({ title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", content: `üö® ${e?.message ?? "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"}` });
      form.resetFields();
      setFileList([]); clearPreview();
      navigate("/Payment/Evidence/EvidenceFail", { replace: true });
    } finally {
      setSubmitting(false);
    }
  };






  useEffect(() => {
    if (!id) return;
    GetEvidenceByID(Number(id)).then((res) => {
      if (res?.status === 200) {
        const ev = res.data;
        form.setFieldsValue({
          note: ev.note,
          transferDate: ev.date ? dayjs(ev.date, "YYYY-MM-DD HH:mm:ss") : null,  // ‚úÖ map ‡πÄ‡∏õ‡πá‡∏ô dayjs
        });
      } 
    });
  }, [id]);

  const getBase64 = (file: File) =>
    new Promise<string>((resolve, reject) => {
      const r = new FileReader();
      r.readAsDataURL(file);
      r.onload = () => resolve(r.result as string);
      r.onerror = reject;
    });

  const onFinish = async (values: any) => {
    setLoading(true);
    try {
      let fileBase64 = "";
      if (fileList[0]?.originFileObj) {
        fileBase64 = await getBase64(fileList[0].originFileObj as File);
      }

      const payload = {
        note: values.note || "",
        date: values.date ? values.date.format("YYYY-MM-DD HH:mm:ss") : "",
        file: fileBase64 || undefined, // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á = ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
      };

      const res = await UpdateEvidence(Number(id), payload);
      if (res?.status === 200) {
        message.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Evidence ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        navigate("/admin/evidences"); // ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      } else {
        Modal.error({ title: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", content: res?.data?.error ?? "Unknown error" });
      }
    } finally {
      setLoading(false);
    }
  };

  const isImage = (m?: string | null) => !!m && (m.includes("image/") || /\.(png|jpe?g|gif|webp)$/i.test(m));
  const isPDF   = (m?: string | null) => !!m && (m.includes("application/pdf") || /\.pdf$/i.test(m));

  return (
    <Row justify="center">
      <Col xs={24} sm={20} md={16} lg={12}>
        <div style={{ background:"#fff", borderRadius:10, padding:24, boxShadow:"0 4px 12px rgba(0,0,0,0.1)" }}>
          <h2 style={{ fontSize:27, display:"flex", justifyContent:"center" }}>‡πÅ‡∏ô‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô</h2>

          {/* ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á + ‡∏ú‡∏π‡πâ‡∏ä‡∏≥‡∏£‡∏∞ + ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô */}
          <Space style={{ marginBottom: 16 }} wrap>
            <div>
              <div style={{ fontWeight:600, marginBottom:6 }}>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á</div>
              <Segmented
                value={method}
                onChange={(v) => setMethod(v as Method)}
                options={[
                  { label: "‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", value: "bank" },
                  { label: "QR ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå", value: "qr" },
                ]}
              />
            </div>

            <div>
              <div style={{ fontWeight:600, marginBottom:6 }}>‡∏ú‡∏π‡πâ‡∏ä‡∏≥‡∏£‡∏∞</div>
              <Input
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡∏≥‡∏£‡∏∞"
                style={{ width: 220 }}
                prefix={<UserOutlined />}
                value={payerName}
                onChange={(e) => setPayerName(e.target.value)}
                allowClear
              />
            </div>

            <div>
              <div style={{ fontWeight:600, marginBottom:6 }}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)</div>
              <Input
                placeholder="‡πÄ‡∏ä‡πà‡∏ô 1500"
                style={{ width: 160 }}
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
                inputMode="decimal"
              />
            </div>
          </Space>

          <Dragger {...uploadProps} accept=".jpg,.jpeg,.png,.pdf">
            <p className="ant-upload-drag-icon"><InboxOutlined /></p>
            <p className="ant-upload-text">‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå</p>
            <p className="ant-upload-hint">‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: JPG, PNG, PDF (‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB)</p>
          </Dragger>

          {previewUrl && (
            <div style={{ marginTop: 16 }}>
              <div style={{ fontWeight:600, marginBottom:8 }}>‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</div>
              {isImage(fileList[0]?.type || previewUrl)
                ? <img src={previewUrl} style={{ maxWidth:"100%", borderRadius:8, border:"1px solid #eee" }} />
                : isPDF(fileList[0]?.type || previewUrl)
                ? <iframe src={previewUrl} title="preview-pdf" style={{ width:"100%", height:480, border:"1px solid #eee", borderRadius:8 }} />
                : null}
            </div>
          )}

          {uploadedUrl && (
            <div style={{ marginTop: 24 }}>
              <div style={{ fontWeight:600, marginBottom:8 }}>‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß</div>
              {isImage(uploadedUrl)
                ? <img src={uploadedUrl} style={{ maxWidth:"100%", borderRadius:8, border:"1px solid #eee" }} />
                : isPDF(uploadedUrl)
                ? <iframe src={uploadedUrl} title="uploaded-pdf" style={{ width:"100%", height:480, border:"1px solid #eee", borderRadius:8 }} />
                : <a href={uploadedUrl} target="_blank" rel="noreferrer">‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå</a>}
            </div>
          )}

          <Form
            form={form}
            layout="vertical"
            style={{ marginTop: 20 }}
            onFinish={handleSubmit}
            onFinishFailed={() => Modal.error({ title:"‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", content:"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô" })}
            initialValues={{ transferDate: dayjs() }}
          >
            <Form.Item
              name="transferDate"
              label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô"
              rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô" }]}
            >
              <DatePicker showTime format="MM/DD/YYYY HH:mm" style={{ width:"100%" }} />
            </Form.Item>

            <Form.Item name="note" label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)">
              <Input.TextArea rows={3} />
            </Form.Item>

            <Form.Item>
              <Button type="primary" htmlType="submit" loading={submitting}>
                ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
              </Button>
            </Form.Item>
          </Form>
        </div>
      </Col>
    </Row>
  );
}
